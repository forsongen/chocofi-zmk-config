/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    hold-while-undecided;
};

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms = <199>;
};

/* COMBOS */

/ {
  combos {
    compatible = "zmk,combos";

    esc {
      key-positions = <21 11>;
      bindings = <&kp ESC>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    tab {
      bindings = <&kp TAB>;
      key-positions = <3 4>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    enter {
      key-positions = <14 13>;
      bindings = <&kp ENTER>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    caps {
      key-positions = <23 24>;
      bindings = <&kp CAPS>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    backspace {
      key-positions = <13 3>;
      bindings = <&kp BSPC>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    backspace_2 {
      bindings = <&kp BSPC>;
      key-positions = <5 15>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    del {
      key-positions = <4 14>;
      bindings = <&kp DEL>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    del_2 {
      bindings = <&kp DEL>;
      key-positions = <6 16>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    pg_up {
      key-positions = <5 6>;
      bindings = <&kp PG_UP>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    pg_dn {
      key-positions = <15 16>;
      bindings = <&kp PG_DN>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    bold {
      bindings = <&kp RG(B)>;
      key-positions = <0 1>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    italic {
      bindings = <&kp RG(I)>;
      key-positions = <1 2>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    underline {
      bindings = <&kp RG(U)>;
      key-positions = <3 2>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    select_all {
      bindings = <&kp RG(A)>;
      key-positions = <1 11>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    find {
      bindings = <&kp RG(F)>;
      key-positions = <2 12>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    find_next {
      bindings = <&kp RG(G)>;
      key-positions = <12 22>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    undo {
      bindings = <&kp RG(Z)>;
      key-positions = <13 23>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    redo {
      bindings = <&kp RG(LS(Z))>;
      key-positions = <24 14>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    cut {
      bindings = <&kp RG(X)>;
      key-positions = <20 21>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    copy {
      bindings = <&kp RG(C)>;
      key-positions = <21 22>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    paste {
      bindings = <&kp RG(V)>;
      key-positions = <23 22>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    ltgt {
      bindings = <&less_than_greater_than>;
      key-positions = <15 25>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    dpar {
      bindings = <&double_par>;
      key-positions = <16 26>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    dbrc {
      bindings = <&double_brc>;
      key-positions = <17 27>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    dbkt {
      bindings = <&double_bkt>;
      key-positions = <18 28>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };
  };

/* MACROS */

macros {
    triple_grave_macro: triple_grave_macro {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "TRIPLE_GRAVE_MACRO";
      bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
    };
    double_par: double_par {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "DOUBLE_PAR";
      bindings = <&kp LPAR &kp RPAR &kp LEFT>;
    };
    double_brc: double_brc {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "DOUBLE_BRC";
      bindings = <&kp LBRC &kp RBRC &kp LEFT>;
    };
    double_bkt: double_bkt {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "DOUBLE_BKT";
      bindings = <&kp LBKT &kp RBKT &kp LEFT>;
    };
    less_than_greater_than: less_than_greater_than {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "LESS_THAN_GREATER_THAN";
      bindings = <&kp LT &kp GT &kp LEFT>;
    };
  };

/* BEHAVIOURS */

behaviors {
    ht: hold_tap {
      compatible = "zmk,behavior-hold-tap";
	  label = "hold_tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&kp>, <&kp>;
	  hold-while-undecided;
	  };
    gqt: global-quick-tap {
      compatible = "zmk,behavior-hold-tap";
      label = "GLOBAL_QUICK_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <125>;
      global-quick-tap;
      bindings = <&kp>, <&kp>;
    };
    lsm: layer_sticky_mods {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "LAYER_STICKY_MODS";
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&mo>, <&sk>;
    };
    msm: mod_sticky_mods {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "MOD_STICKY_MODS";
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&kp>, <&sk>;
    };
    tgrave: grave_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "GRAVE_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&triple_grave_macro>, <&kp>;
    };
    dpar: par_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "PAR_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&double_par>, <&kp>;
    };
    dbrc: brc_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "BRC_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&double_brc>, <&kp>;
    };
    dbkt: bkt_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "BKT_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&double_bkt>, <&kp>;
    };
    ltgt: ltgt_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "LTGT_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&less_than_greater_than>, <&kp>;
    };
    cmdtab: cmdtab {
      compatible = "zmk,behavior-tri-state";
      label = "CMDTAB";
      #binding-cells = <0>;
      bindings = <&kt RCMD>, <&kp TAB>, <&kt RCMD>;
      ignored-key-positions = <1>;
    };
    ctrltab: ctrltab {
      compatible = "zmk,behavior-tri-state";
      label = "CTRLTAB";
      #binding-cells = <0>;
      bindings = <&kt RCTRL>, <&kp TAB>, <&kt RCTRL>;
      ignored-key-positions = <1>;
    };
  };

/* KEYMAP */

  keymap {
    compatible = "zmk,keymap";

    base {
      label = "BASE";
      bindings = <
        &kp Q  &kp W  &kp F                    &kp P        &kp B            &kp J          &kp L        &kp U                   &kp Y    &kp SQT
        &kp A  &kp R  &kp S                    &kp T        &kp G            &kp M          &kp N        &kp E                   &kp I    &kp O
        &kp Z  &kp X  &kp C                    &kp D        &kp V            &kp K          &kp H        &kp COMMA               &kp DOT  &kp SEMI
                      &mt RS(RA(RCTRL)) ENTER  &lt 1 SPACE  &lsm 3 LSHIFT    &lsm 4 RSHIFT  &lt 2 SPACE  &mt RS(RA(RCTRL)) BSPC
      >;
    };

    nvnm {
      label = "NAVNUM ";
      bindings = <
        &cmdtab    &kp HOME      &kp RC(LS(LA(COMMA)))  &kp END        &none                  &kp RA(N2)  &kp N7  &kp N8  &kp N9  &kp SLASH
        &kp LSHFT  &kp LEFT      &kp UP                 &kp RIGHT      &kp LA(LS(RC(DOT)))    &kp LS(N3)  &kp N4  &kp N5  &kp N6  &kp MINUS
        &ctrltab   &kp LA(LEFT)  &kp DOWN               &kp LA(RIGHT)  &none                  &kp DLLR    &kp N1  &kp N2  &kp N3  &kp DOT
                                 &trans                 &trans         &trans                 &trans      &kp N0  &trans
      >;
    };

    symb {
      label = "SYMBOL ";
      bindings = <
        &kp LS(GRAVE)  &dbkt 0 LBKT  &dbrc 0 LBRC     &dpar 0 LPAR  &ltgt 0 LT    &kp GT      &kp RBRC   &kp RBKT   &kp ASTRK  &none
        &kp N3         &kp UNDER     &kp AT           &kp PRCNT     &kp DLLR      &kp RA(N3)  &kp EQUAL  &kp ASTRK  &kp PLUS   &kp MINUS
        &none          &kp CARET     &tgrave 0 GRAVE  &kp SLASH     &none         &none       &kp BSLH   &kp AMPS   &kp QMARK  &kp EXCL
                                     &trans           &trans        &trans        &trans      &trans     &trans
      >;
    };

    func {
      label = "FUNCTION";
      bindings = <
        &kp LA(TAB)       &cmdtab           &ctrltab        &kp LG(SPACE)   &none     &none   &kp F1  &kp F2   &kp F3   &kp F4
        &msm LSHFT LSHFT  &msm RCTRL RCTRL  &msm LALT LALT  &msm RCMD RCMD  &none     &none   &kp F5  &kp F6   &kp F7   &kp F8
        &sys_reset        &none             &none           &none           &none     &none   &kp F9  &kp F10  &kp F11  &kp F12
                                            &trans          &trans          &trans    &trans  &trans  &trans
      >;
    };

    media {
      label = "MEDIA";
      bindings = <
        &kp LS(LA(RC(KP_N1)))  &kp LS(LA(RC(KP_N2)))  &kp LS(LA(RC(KP_N3)))    &kp LS(LA(RC(KP_N4)))     &none    &kp C_VOL_UP  &none             &none           &none             &none
        &kp LS(LA(RC(KP_N5)))  &kp LS(LA(RC(KP_N6)))  &kp LS(LA(RC(KP_N7)))    &kp LS(LA(RC(KP_N8)))     &none    &kp C_VOL_DN  &msm RCMD RCMD    &msm RALT RALT  &msm RCTRL RCTRL  &msm RSHFT RSHFT
        &kp LS(LA(RC(KP_N9)))  &kp LS(LA(RC(KP_N0)))  &kp LS(LA(RC(KP_PLUS)))  &kp LS(LA(RC(KP_MINUS)))  &none    &kp C_MUTE    &kp C_PLAY_PAUSE  &none           &none             &sys_reset
                                                            &none                    &none                     &none    &none         &none             &none
      >;
    };

    connect {
      label = "CONNECT";
      bindings = <
        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
        &none         &none         &none         &none         &none           &none         &none         &none         &none         &none
        &bt BT_CLR    &none         &none         &none         &sys_reset      &sys_reset    &none         &none         &none         &bt BT_CLR
                                    &none         &none         &none           &none         &none         &none
      >;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    connect {
      if-layers = <3 4>;
      then-layer = <5>;
    };
  };
};
