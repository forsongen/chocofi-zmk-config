#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE  0
#define NAV   1
#define SYM   2
#define NUM   3
#define SYS	  4

#define BT(n) BT_SEL n

&mt {
  hold-while-undecided;
};

&lt {
  tapping-term-ms = <200>;
  quick-tap-ms = <199>;
};

&sk {
  release-after-ms = <2000>;
  quick-release;
};

/ {
  // COMBOS

  combos {
    compatible = "zmk,combos";

    // --> KEYCODES

    esc {
      key-positions = <11 12>;
      bindings = <&kp ESC>;
      timeout-ms = <40>;
      layers = <0 2 3>;
      require-prior-idle-ms = <200>;
    };

    tab {
      key-positions = <12 13>;
      bindings = <&kp TAB>;
      timeout-ms = <40>;
      layers = <0 2 3>;
      require-prior-idle-ms = <200>;
    };

    backspace {
      key-positions = <21 22>;
      bindings = <&kp BSPC>;
      timeout-ms = <40>;
      layers = <0 2 3>;
      require-prior-idle-ms = <200>;
    };

    del {
      key-positions = <22 23>;
      bindings = <&kp DEL>;
      timeout-ms = <40>;
      layers = <0 2 3>;
      require-prior-idle-ms = <200>;
    };

    // --> MODS

    lctrl {
      key-positions = <10 11>;
      bindings = <&kp LCTRL>;
      timeout-ms = <40>;
      layers = <0 2 3 4>;
      require-prior-idle-ms = <200>;
    };

    lalt {
      key-positions = <11 12>;
      bindings = <&kp LALT>;
      timeout-ms = <40>;
      layers = <0 2 3 4>;
      require-prior-idle-ms = <200>;
    };

    lgui {
      key-positions = <12 13>;
      bindings = <&kp LGUI>;
      timeout-ms = <40>;
      layers = <0 2 3 4>;
      require-prior-idle-ms = <200>;
    };

    lctrlalt {
      key-positions = <10 11 12>;
      bindings = <&kp LC(LALT)>;
      timeout-ms = <40>;
      layers = <0 2 3 4>;
      require-prior-idle-ms = <200>;
    };

    laltgui {
      key-positions = <11 12 13>;
      bindings = <&kp LA(LGUI)>;
      timeout-ms = <40>;
      layers = <0 2 3 4>;
      require-prior-idle-ms = <200>;
    };

    lctrlaltgui {
      key-positions = <10 11 12 13>;
      bindings = <&kp LC(LA(LGUI))>;
      timeout-ms = <40>;
      layers = <0 2 3 4>;
      require-prior-idle-ms = <200>;
    };

    rgui {
      key-positions = <16 17>;
      bindings = <&kp RGUI>;
      timeout-ms = <40>;
      layers = <0 2 3 4>;
      require-prior-idle-ms = <200>;
    };

    ralt {
      key-positions = <17 18>;
      bindings = <&kp RALT>;
      timeout-ms = <40>;
      layers = <0 2 3 4>;
      require-prior-idle-ms = <200>;
    };

    rctrl {
      key-positions = <18 19>;
      bindings = <&kp RCTRL>;
      timeout-ms = <40>;
      layers = <0 2 3 4>;
      require-prior-idle-ms = <200>;
    };

    rguialt {
      key-positions = <16 17 18>;
      bindings = <&kp RG(RALT)>;
      timeout-ms = <40>;
      layers = <0 2 3 4>;
      require-prior-idle-ms = <200>;
    };

    raltctrl {
      key-positions = <17 18 19>;
      bindings = <&kp RA(RCTRL)>;
      timeout-ms = <40>;
      layers = <0 2 3 4>;
      require-prior-idle-ms = <200>;
    };

    rguialtctrl {
      key-positions = <16 17 18 19>;
      bindings = <&kp RG(RA(RCTRL))>;
      timeout-ms = <40>;
      layers = <0 2 3 4>;
      require-prior-idle-ms = <200>;
    };

    // --> SHORTCUTS

    quit {
      key-positions = <0 1>;
      bindings = <&kp RG(Q)>;
      layers = <1>;
      timeout-ms = <40>;
    };

    undo {
      key-positions = <1 2>;
      bindings = <&kp RG(Z)>;
      layers = <1>;
      timeout-ms = <40>;
    };

    redo {
      key-positions = <2 3>;
      bindings = <&kp RG(RS(Z))>;
      layers = <1>;
      timeout-ms = <40>;
    };

    all {
      key-positions = <10 11>;
      bindings = <&kp RG(A)>;
      layers = <1>;
      timeout-ms = <40>;
    };

    find {
      key-positions = <11 12>;
      bindings = <&kp RG(F)>;
      layers = <1>;
      timeout-ms = <40>;
    };

    newtab {
      key-positions = <12 13>;
      bindings = <&kp RG(T)>;
      layers = <1>;
      timeout-ms = <40>;
    };

    new {
      key-positions = <13 14>;
      bindings = <&kp RG(N)>;
      layers = <1>;
      timeout-ms = <40>;
    };

    cut {
      key-positions = <20 21>;
      bindings = <&kp RG(X)>;
      timeout-ms = <40>;
      layers = <1>;
      require-prior-idle-ms = <200>;
    };

    copy {
      key-positions = <21 22>;
      bindings = <&kp RG(C)>;
      timeout-ms = <40>;
      layers = <1>;
      require-prior-idle-ms = <200>;
    };

    paste {
      key-positions = <22 23>;
      bindings = <&kp RG(V)>;
      timeout-ms = <40>;
      layers = <1>;
      require-prior-idle-ms = <200>;
    };
  };

  // MACROS

  macros {
    triple_grave_macro: triple_grave_macro {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "TRIPLE_GRAVE_MACRO";
      bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
    };
    new_line_macro: new_line_macro {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "NEW_LINE_MACRO";
      bindings = <&kp BSLH &kp N>;
    };
    less_greater: less_greater {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "LESS_GREATER";
      bindings = <&kp LT &kp GT &kp LEFT>;
    };
    double_bkt: double_bkt {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "DOUBLE_BKT";
      bindings = <&kp LBKT &kp RBKT &kp LEFT>;
    };
    double_par: double_par {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "DOUBLE_PAR";
      bindings = <&kp LPAR &kp RPAR &kp LEFT>;
    };
    double_brc: double_brc {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "DOUBLE_BRC";
      bindings = <&kp LBRC &kp RBRC &kp LEFT>;
    };
  };

  // BEHAVIOURS

  behaviors {

    // --> GENERAL

    ht: hold_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "hold_tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&kp>, <&kp>;
      hold-while-undecided;
    };

    gqt: global-quick-tap {
      compatible = "zmk,behavior-hold-tap";
      label = "GLOBAL_QUICK_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <125>;
      global-quick-tap;
      bindings = <&kp>, <&kp>;
    };

    lsm: layer_sticky_mod {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "LAYER_STICKY_MOD";
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&mo>, <&sk>;
    };

    msl: mod_sticky_layer {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "MOD_STICKY_LAYER";
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&kp>, <&sl>;
    };

    msm: mod_sticky_mod {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "MOD_STICKY_MOD";
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&kp>, <&sk>;
    };

    lsl: layer_sticky_layer {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "LAYER_STICKY_LAYER";
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&mo>, <&sl>;
    };

    // --> KEYMAP

    tgrave: grave_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "GRAVE_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&triple_grave_macro>, <&kp>;
    };

    nline: bslh_newline_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "BSLH_NEWLINE_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&new_line_macro>, <&kp>;
    };

    ltgt: ltgt_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "LTGT_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&less_greater>, <&kp>;
    };

    dbkt: dbkt_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "DBKT_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&double_bkt>, <&kp>;
    };

    dpar: dpar_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "DPAR_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&double_par>, <&kp>;
    };

    dbrc: dbrc_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "DBRC_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&double_brc>, <&kp>;
    };

    cmdtab: cmdtab {
      compatible = "zmk,behavior-tri-state";
      label = "CMDTAB";
      #binding-cells = <0>;
      bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;
      ignored-key-positions = <1>;
    };

    ctrltab: ctrltab {
      compatible = "zmk,behavior-tri-state";
      label = "CTRLTAB";
      #binding-cells = <0>;
      bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
      ignored-key-positions = <1>;
    };

    // --> MOD MORPH

    commaco: comma_colon {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_COLON";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp COLON>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    dotsemi: dot_semi {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_SEMI";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp SEMI>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    bspcdel: bspc_del {
      compatible = "zmk,behavior-mod-morph";
      label = "BSPC_DEL";
      #binding-cells = <0>;
      bindings = <&kp BSPC>, <&kp DEL>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    supershift: supershift {
      compatible = "zmk,behavior-mod-morph";
      label = "SUPERSHIFT";
      #binding-cells = <0>;
      bindings = <&msm RSHFT RSHFT>, <&kp CAPS>;
      mods = <(MOD_RSFT)>;
    };
    supersym: supersym {
      compatible = "zmk,behavior-mod-morph";
      label = "SUPERSYM";
      #binding-cells = <0>;
      bindings = <&lsl NUM SYM>, <&tog SYM>;
      mods = <(MOD_RSFT)>;
    };
    

  };

  // KEYMAP

  keymap {
    compatible = "zmk,keymap";

    base {
      label = "BASE";
      bindings = <
        &kp W  &kp L  &kp Y          &kp P          &kp B          &kp Z        &kp F      &kp O     &kp U     &kp SQT
        &kp C  &kp R  &kp S          &kp T          &kp G          &kp M        &kp N      &kp E     &kp I     &kp A
        &kp Q  &kp J  &kp V          &kp D          &kp K          &kp X        &kp H      &kp FSLH  &commaco  &dotsemi
                      &lt SYS ENTER  &lt NAV SPACE  &supershift    &supershift  &supersym  &bspcdel
      >;
    };

    nav {
      label = "NAV";
      bindings = <
        &none         &kp HOME  &none     &kp END    &none            &kp PG_UP  &none   &none  &none  &none
        &kp LA(LEFT)  &kp LEFT  &kp UP    &kp RIGHT  &kp LA(RIGHT)    &kp PG_DN  &none   &none  &none  &none
        &cmdtab       &ctrltab  &kp DOWN  &none      &none            &none      &none   &none  &none  &none
                                &trans    &trans     &trans           &trans     &trans  &trans
      >;
    };

    sym {
      label = "SYM";
      bindings = <
        &tgrave 0 GRAVE  &dpar 0 LPAR  &kp RPAR  &kp SEMI  &kp AT        &kp PRCNT  &kp AMPS       &kp PIPE   &kp UNDER  &kp PLUS
        &dbrc 0 LBRC     &kp SQT       &kp DQT   &kp RBRC  &kp EXCL      &kp STAR   &ltgt 0 LT     &kp EQUAL  &kp MINUS  &kp GT
        &kp LS(GRAVE)    &dbkt 0 LBKT  &kp RBKT  &kp DLLR  &kp RA(N3)    &kp CARET  &nline 0 BSLH  &kp FSLH   &kp COMMA  &kp DOT
                                       &trans    &trans    &trans        &trans     &supersym      &trans
      >;
    };

    num {
      label = "NUM";
      bindings = <
        &kp EQUAL  &kp N7  &kp N8  &kp N9  &to NUM      &none   &none      &none     &none       &none
        &kp PLUS   &kp N4  &kp N5  &kp N6  &kp MINUS    &none   &kp HASH   &kp DLLR  &kp RA(N2)  &none
        &kp STAR   &kp N1  &kp N2  &kp N3  &kp FSLH     &none   &kp COLON  &kp FSLH  &kp COMMA   &kp DOT
                           &trans  &trans  &kp N0       &trans  &to BASE   &trans
      >;
    };

    sys {
      label = "SYS";
      bindings = <
        &none   &kp C_PREV    &kp C_NEXT    &kp C_PP    &none     &bt BT(0)   &bt BT(1)  &bt BT(2)  &bt BT(3)  &bt BT(4)
        &none   &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE  &kp N5    &bt BT_CLR  &none      &none      &kp F11    &kp F12
        &kp F1  &kp F2        &kp F3        &kp F4      &kp F5    &kp F6      &kp F7     &kp F8     &kp F9     &kp F10
                              &trans        &trans      &trans    &trans      &trans     &trans
      >;
    };
  };
};
