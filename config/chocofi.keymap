#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
  hold-while-undecided;
};

&lt {
  tapping-term-ms = <200>;
  quick-tap-ms = <199>;
};

&sk {
  release-after-ms = <2000>;
  quick-release;
};

/ {
  // COMBOS

  combos {
    compatible = "zmk,combos";

    // --> KEYCODES

    esc {
      key-positions = <10 11>;
      bindings = <&kp ESC>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    caps {
      key-positions = <1 2>;
      bindings = <&kp CAPS>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    tab {
      bindings = <&kp TAB>;
      key-positions = <1 11>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    backspace {
      key-positions = <3 13>;
      bindings = <&kp BSPC>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    del {
      key-positions = <4 14>;
      bindings = <&kp DEL>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    // --> SHORTCUTS

    num {
      bindings = <&tog 2>;
      key-positions = <7 8>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    cut {
      bindings = <&kp RG(X)>;
      key-positions = <20 21>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    copy {
      bindings = <&kp RG(C)>;
      key-positions = <21 22>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    paste {
      bindings = <&kp RG(V)>;
      key-positions = <23 22>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    undo {
      bindings = <&kp RG(Z)>;
      key-positions = <21 22>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    redo {
      bindings = <&kp LS(RG(Z))>;
      key-positions = <23 22>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    // --> SYMBOLS

    backslash {
      key-positions = <26 27>;
      bindings = <&kp BSLH>;
      timeout-ms = <40>;
    };    

    forwardslash {
      key-positions = <27 28>;
      bindings = <&kp SLASH>;
      timeout-ms = <40>;
    };

    underscore {
      key-positions = <18 19>;
      bindings = <&kp UNDER>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    equals {
      key-positions = <16 17>;
      bindings = <&kp EQUAL>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    minus {
      bindings = <&kp MINUS>;
      key-positions = <17 18>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    plus {
      key-positions = <6 7>;
      bindings = <&kp PLUS>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    brcs {
      bindings = <&brcs>;
      key-positions = <5 15>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    pars {
      bindings = <&pars>;
      key-positions = <6 16>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    ltgt {
      bindings = <&ltgt>;
      key-positions = <7 17>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    bkts {
      bindings = <&bkts>;
      key-positions = <8 18>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };
  };

  // MACROS

  macros {
    triple_grave_macro: triple_grave_macro {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "TRIPLE_GRAVE_MACRO";
      bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
    };
    less_greater: less_greater {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "LESS_GREATER";
      bindings = <&kp LT &kp GT &kp LEFT>;
    };
    double_bkt: double_bkt {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "DOUBLE_BKT";
      bindings = <&kp LBKT &kp RBKT &kp LEFT>;
    };
    double_par: double_par {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "DOUBLE_PAR";
      bindings = <&kp LPAR &kp RPAR &kp LEFT>;
    };
    double_brc: double_brc {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "DOUBLE_BRC";
      bindings = <&kp LBRC &kp RBRC &kp LEFT>;
    };
  };

  // BEHAVIOURS

  behaviors {
    // --> GENERAL

    ht: hold_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "hold_tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&kp>, <&kp>;
      hold-while-undecided;
    };

    gqt: global-quick-tap {
      compatible = "zmk,behavior-hold-tap";
      label = "GLOBAL_QUICK_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <125>;
      global-quick-tap;
      bindings = <&kp>, <&kp>;
    };

    lsm: layer_sticky_mods {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "LAYER_STICKY_MODS";
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&mo>, <&sk>;
    };

    msm: mod_sticky_mods {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "MOD_STICKY_MODS";
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&kp>, <&sk>;
    };

    // --> KEYMAP

    tgrave: grave_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "GRAVE_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&triple_grave_macro>, <&kp>;
    };

    auto_ltgt: auto_ltgt_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "AUTO_LTGT_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&less_greater>, <&kp>;
    };

    ltgt: tap_dance_ltgt {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_LTGT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&auto_ltgt 0 LT>, <&kp GT>;
    };

    auto_dbkt: auto_dbkt_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "AUTO_DBKT_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&double_bkt>, <&kp>;
    };

    bkts: tap_dance_bkts {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BKTS";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&auto_dbkt 0 LBKT>, <&kp RBKT>;
    };

    auto_dpar: auto_dpar_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "AUTO_DPAR_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&double_par>, <&kp>;
    };

    pars: tap_dance_pars {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_PARS";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&auto_pars 0 LPAR>, <&kp RPAR>;
    };

    auto_dbrc: auto_dbrc_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "AUTO_DBRC_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&double_brc>, <&kp>;
    };

    brcs: tap_dance_brcs {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BRCS";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&auto_brcs 0 LBRC>, <&kp RBRC>;
    };

    cmdtab: cmdtab {
      compatible = "zmk,behavior-tri-state";
      label = "CMDTAB";
      #binding-cells = <0>;
      bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;
      ignored-key-positions = <1>;
    };

    ctrltab: ctrltab {
      compatible = "zmk,behavior-tri-state";
      label = "CTRLTAB";
      #binding-cells = <0>;
      bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
      ignored-key-positions = <1>;
    };

    // --> MOD MORPH

    commacolon: comma_colon {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_COLON";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp COLON>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    dotsemi: dot_semi {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_SEMI";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp SEMI>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    qexcl: qmark_excl {
      compatible = "zmk,behavior-mod-morph";
      label = "QMARK_EXCL";
      #binding-cells = <0>;
      bindings = <&kp QMARK>, <&kp EXCL>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };

  // KEYMAP

  keymap {
    compatible = "zmk,keymap";

    base {
      label = "BASE";
      bindings = <
        &kp Q  &kp W  &kp F               &kp P        &kp B            &kp J         &kp L        &kp U                   &kp Y     &kp SQT
        &kp A  &kp R  &kp S               &kp T        &kp G            &kp M         &kp N        &kp E                   &kp I     &kp O
        &kp Z  &kp X  &kp C               &kp D        &kp V            &kp K         &kp H        &commacolon             &dotsemi  &qexcl
                      &mt RS(RALT) ENTER  &lt 1 SPACE  &lsm 3 LSHFT     &lsm 4 RSHFT  &lt 2 SPACE  &lt 5 BSPC
      >;
    };

    lower {
      label = "LOWER";
      bindings = <
        &none      &kp LA(LEFT)  &kp LS(LA(COMMA))  &kp LA(RIGHT)  &none              &kp PG_UP  &kp F1  &kp F2   &kp F3   &kp F4
        &kp LSHFT  &kp LEFT      &kp UP             &kp RIGHT      &kp LA(LS(DOT))    &kp PG_DN  &kp F5  &kp F6   &kp F7   &kp F8
        &none      &kp HOME      &kp DOWN           &kp END        &none              &none      &kp F9  &kp F10  &kp F11  &kp F12
                                 &trans             &trans         &trans             &trans     &trans     &trans
      >;
    };

    raise {
      label = "RAISE";
      bindings = <
        &tgrave 0 GRAVE  &kp AT      &kp RA(N3)  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp STAR  &none  &none
        &kp N1           &kp N2      &kp N3      &kp N4    &kp N5       &kp N6     &kp N7    &kp N8    &kp N9  &kp N0
        &kp LS(GRAVE)    &kp RA(N2)  &kp HASH    &none     &none        &none      &kp PIPE  &trans    &trans  &trans
                         &trans   &trans   &trans    &trans      &trans  &trans
      >;
    };

    lmods {
      label = "LMODS";
      bindings = <
        &kp LA(TAB)       &cmdtab           &ctrltab        &kp LG(SPACE)   &none     &trans  &trans  &trans  &trans  &trans
        &msm LSHFT LSHFT  &msm RCTRL RCTRL  &msm LALT LALT  &msm RCMD RCMD  &none     &trans  &trans  &trans  &trans  &trans
        &sys_reset        &none             &none           &none           &none     &trans  &trans  &trans  &trans  &trans
                                            &trans          &trans          &trans    &trans  &trans  &trans
      >;
    };

    rmods {
      label = "RMODS";
      bindings = <
        &trans  &trans  &trans  &trans  &trans    &kp C_VOL_UP  &none            &none           &none             &none
        &trans  &trans  &trans  &trans  &trans    &kp C_VOL_DN  &msm RCMD RCMD   &msm RALT RALT  &msm RCTRL RCTRL  &msm RSHFT RSHFT
        &trans  &trans  &trans  &trans  &trans    &kp C_MUTE    &kp C_PLAY_PAUSE &none           &none             &sys_reset
                        &trans  &trans  &trans    &trans        &trans           &trans
      >;
    };

    sys {
      label = "SYS";
      bindings = <
        &kp LS(LA(KP_N1))  &kp LS(LA(KP_N2))  &kp LS(LA(KP_N3))    &kp LS(LA(KP_N4))     &none    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
        &kp LS(LA(KP_N5))  &kp LS(LA(KP_N6))  &kp LS(LA(KP_N7))    &kp LS(LA(KP_N8))     &none    &none         &none         &none         &none         &none
        &kp LS(LA(KP_N9))  &kp LS(LA(KP_N0))  &kp LS(LA(KP_PLUS))  &kp LS(LA(KP_MINUS))  &none    &none         &none         &none         &none         &bt BT_CLR
                                              &none                &none                 &none    &none         &none         &none
      >;
    };
  };
};
