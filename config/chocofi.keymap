#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
  hold-while-undecided;
};

&lt {
  tapping-term-ms = <200>;
  quick-tap-ms = <199>;
};

&sk {
  release-after-ms = <2000>;
};

/ {
  // COMBOS

  combos {
    compatible = "zmk,combos";

    // --> KEYCODES

    esc {
      key-positions = <2 1>;
      bindings = <&kp ESC>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    tab {
      bindings = <&kp TAB>;
      key-positions = <3 4>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    backspace {
      key-positions = <13 3>;
      bindings = <&kp BSPC>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    del {
      key-positions = <4 14>;
      bindings = <&kp DEL>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    enter {
      key-positions = <14 13>;
      bindings = <&kp ENTER>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    // --> SHORTCUTS

    undo {
      bindings = <&kp RG(Z)>;
      key-positions = <11 12>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    redo {
      bindings = <&kp RG(LS(Z))>;
      key-positions = <12 13>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    cut {
      bindings = <&kp RG(X)>;
      key-positions = <20 21>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    copy {
      bindings = <&kp RG(C)>;
      key-positions = <21 22>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    paste {
      bindings = <&kp RG(V)>;
      key-positions = <23 22>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    // --> SYMBOLS

    forwardslash {
      key-positions = <2 3>;
      bindings = <&kp SLASH>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    asterisk {
      bindings = <&kp ASTRK>;
      key-positions = <5 6>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    backslash {
      key-positions = <6 7>;
      bindings = <&kp BSLH>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    percent {
      key-positions = <7 8>;
      bindings = <&kp PRCNT>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    grave {
      key-positions = <1 11>;
      bindings = <&tgrave 0 GRAVE>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    underscore {
      key-positions = <5 15>;
      bindings = <&kp UNDER>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    equals {
      key-positions = <15 16>;
      bindings = <&kp EQUAL>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    minus {
      bindings = <&kp MINUS>;
      key-positions = <6 16>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    plus {
      key-positions = <7 17>;
      bindings = <&kp PLUS>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    caret {
      key-positions = <8 18>;
      bindings = <&kp CARET>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    at {
      key-positions = <25 26>;
      bindings = <&kp AT>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    dollar {
      key-positions = <16 17>;
      bindings = <&kp DLLR>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    hash {
      key-positions = <17 18>;
      bindings = <&kp RA(N3)>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    ltgt {
      bindings = <&ltgt 0 LT>;
      key-positions = <11 21>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    dbkt {
      bindings = <&dbkt 0 LBKT>;
      key-positions = <12 22>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    dpar {
      bindings = <&dpar 0 LPAR>;
      key-positions = <13 23>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    dbrc {
      bindings = <&dbrc 0 LBRC>;
      key-positions = <14 24>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    rbrc {
      key-positions = <15 25>;
      bindings = <&kp RBRC>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    rpar {
      key-positions = <16 26>;
      bindings = <&kp RPAR>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    rbkt {
      key-positions = <17 27>;
      bindings = <&kp RBKT>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    gt {
      key-positions = <18 28>;
      bindings = <&kp GT>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    tilde {
      key-positions = <12 2>;
      bindings = <&kp LS(GRAVE)>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    ampersand {
      key-positions = <27 26>;
      bindings = <&kp AMPS>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    pipe {
      key-positions = <27 28>;
      bindings = <&kp PIPE>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
    };

    // --> NAV COMBOS

    bold {
      bindings = <&kp RG(B)>;
      key-positions = <0 1>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
      layers = <1>;
    };

    italic {
      bindings = <&kp RG(I)>;
      key-positions = <1 2>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
      layers = <1>;
    };

    underline {
      bindings = <&kp RG(U)>;
      key-positions = <3 2>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
      layers = <1>;
    };

    select_all {
      bindings = <&kp RG(A)>;
      key-positions = <1 11>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
      layers = <1>;
    };

    find {
      bindings = <&kp RG(F)>;
      key-positions = <2 12>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
      layers = <1>;
    };

    find_next {
      bindings = <&kp RG(G)>;
      key-positions = <12 22>;
      timeout-ms = <40>;
      require-prior-idle-ms = <200>;
      layers = <1>;
    };
  };

  // MACROS

  macros {
    triple_grave_macro: triple_grave_macro {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "TRIPLE_GRAVE_MACRO";
      bindings = <&kp GRAVE &kp GRAVE &kp GRAVE>;
    };
    less_greater: less_greater {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "LESS_GREATER";
      bindings = <&kp LT &kp GT &kp LEFT>;
    };
    double_bkt: double_bkt {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "DOUBLE_BKT";
      bindings = <&kp LBKT &kp RBKT &kp LEFT>;
    };
    double_par: double_par {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "DOUBLE_PAR";
      bindings = <&kp LPAR &kp RPAR &kp LEFT>;
    };
    double_brc: double_brc {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "DOUBLE_BRC";
      bindings = <&kp LBRC &kp RBRC &kp LEFT>;
    };
  };

  // BEHAVIOURS

  behaviors {
    // --> GENERAL

    ht: hold_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "hold_tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&kp>, <&kp>;
      hold-while-undecided;
    };

    gqt: global-quick-tap {
      compatible = "zmk,behavior-hold-tap";
      label = "GLOBAL_QUICK_TAP";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <125>;
      global-quick-tap;
      bindings = <&kp>, <&kp>;
    };

    lsm: layer_sticky_mods {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "LAYER_STICKY_MODS";
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&mo>, <&sk>;
    };

    msm: mod_sticky_mods {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "MOD_STICKY_MODS";
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <150>;
      bindings = <&kp>, <&sk>;
    };

    // --> KEYMAP

    tgrave: grave_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "GRAVE_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&triple_grave_macro>, <&kp>;
    };

    ltgt: ltgt_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "LTGT_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&less_greater>, <&kp>;
    };

    dbkt: bkt_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "BKT_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&double_bkt>, <&kp>;
    };

    dpar: par_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "PAR_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&double_par>, <&kp>;
    };

    dbrc: brc_macro {
      compatible = "zmk,behavior-hold-tap";
      label = "BRC_MACRO";
      #binding-cells = <2>;
      tapping-term-ms = <400>;
      quick-tap-ms = <150>;
      flavor = "balanced";
      bindings = <&double_brc>, <&kp>;
    };

    cmdtab: cmdtab {
      compatible = "zmk,behavior-tri-state";
      label = "CMDTAB";
      #binding-cells = <0>;
      bindings = <&kt LCMD>, <&kp TAB>, <&kt LCMD>;
      ignored-key-positions = <1>;
    };

    ctrltab: ctrltab {
      compatible = "zmk,behavior-tri-state";
      label = "CTRLTAB";
      #binding-cells = <0>;
      bindings = <&kt LCTRL>, <&kp TAB>, <&kt LCTRL>;
      ignored-key-positions = <1>;
    };

    auto_l: autoshift_left {
      compatible = "zmk,behavior-tap-dance";
      label = "AUTOSHIFT_LEFT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&lsm 3 LSHIFT>, <&kp CAPS>;
    };

    auto_r: autoshift_right {
      compatible = "zmk,behavior-tap-dance";
      label = "AUTOSHIFT_RIGHT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&lsm 4 RSHIFT>, <&kp CAPS>;
    };

    // --> MOD MORPH

    commacolon: comma_colon {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_COLON";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp COLON>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    dotsemi: dot_semi {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_SEMI";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp SEMI>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    qexcl: qmark_excl {
      compatible = "zmk,behavior-mod-morph";
      label = "QMARK_EXCL";
      #binding-cells = <0>;
      bindings = <&kp QMARK>, <&kp EXCL>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };

  // KEYMAP

  keymap {
    compatible = "zmk,keymap";

    base {
      label = "BASE";
      bindings = <
        &kp Q  &kp W  &kp F                    &kp P        &kp B      &kp J    &kp L        &kp U                   &kp Y     &kp SQT
        &kp A  &kp R  &kp S                    &kp T        &kp G      &kp M    &kp N        &kp E                   &kp I     &kp O
        &kp Z  &kp X  &kp C                    &kp D        &kp V      &kp K    &kp H        &commacolon             &dotsemi  &qexcl
                      &mt RS(RA(RCTRL)) ENTER  &lt 1 SPACE  &auto_l    &auto_r  &lt 2 SPACE  &mt RS(RA(RCTRL)) BSPC
      >;
    };

    nav {
      label = "NAV";
      bindings = <
        &none      &kp HOME      &kp RC(LS(LA(COMMA)))  &kp END        &none                  &none   &kp PG_UP  &none   &none  &none
        &kp LSHFT  &kp LEFT      &kp UP                 &kp RIGHT      &kp LA(LS(RC(DOT)))    &none   &kp PG_DN  &none   &none  &none
        &none      &kp LA(LEFT)  &kp DOWN               &kp LA(RIGHT)  &none                  &none   &none      &none   &none  &none
                                 &trans                 &trans         &trans                 &trans  &trans     &trans
      >;
    };

    num {
      label = "NUM";
      bindings = <
        &kp F1  &kp F2   &kp F3   &kp F4   &none     &kp RA(N2)  &kp N7  &kp N8  &kp N9  &none
        &kp F5  &kp F6   &kp F7   &kp F8   &none     &kp LS(N3)  &kp N4  &kp N5  &kp N6  &kp N0
        &kp F9  &kp F10  &kp F11  &kp F12  &none     &kp DLLR    &kp N1  &kp N2  &kp N3  &kp DOT
                         &trans   &trans   &trans    &trans      &trans  &trans
      >;
    };

    sys {
      label = "SYS";
      bindings = <
        &kp LA(TAB)       &cmdtab           &ctrltab        &kp LG(SPACE)   &none     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
        &msm LSHFT LSHFT  &msm RCTRL RCTRL  &msm LALT LALT  &msm RCMD RCMD  &none     &none         &none         &none         &none         &none
        &sys_reset        &none             &none           &none           &none     &sys_reset    &none         &none         &none         &bt BT_CLR
                                            &trans          &trans          &trans    &trans        &trans        &trans
      >;
    };

    media {
      label = "MEDIA";
      bindings = <
        &kp LS(LA(RC(KP_N1)))  &kp LS(LA(RC(KP_N2)))  &kp LS(LA(RC(KP_N3)))    &kp LS(LA(RC(KP_N4)))     &none    &kp C_VOL_UP  &none             &none           &none             &none
        &kp LS(LA(RC(KP_N5)))  &kp LS(LA(RC(KP_N6)))  &kp LS(LA(RC(KP_N7)))    &kp LS(LA(RC(KP_N8)))     &none    &kp C_VOL_DN  &msm RCMD RCMD    &msm RALT RALT  &msm RCTRL RCTRL  &msm RSHFT RSHFT
        &kp LS(LA(RC(KP_N9)))  &kp LS(LA(RC(KP_N0)))  &kp LS(LA(RC(KP_PLUS)))  &kp LS(LA(RC(KP_MINUS)))  &none    &kp C_MUTE    &kp C_PLAY_PAUSE  &none           &none             &sys_reset
                                                      &none                    &none                     &none    &none         &none             &none
      >;
    };
  };
};
